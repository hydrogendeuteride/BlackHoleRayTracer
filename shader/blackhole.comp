#version 430 core

precision mediump float;

layout (local_size_x = 16, local_size_y = 16) in;
layout (rgba16f, binding = 0) uniform image2D outputImage;

uniform vec2 resolution;

uniform float time;

uniform int integrationType;
uniform bool disk;
uniform int accretionDiskOrbit;
uniform bool dopplerShift;
uniform bool gravitationalRedShift;
uniform bool beaming;
uniform bool realisticTemperature;
uniform float accretionTemp;

uniform vec3 cameraPos;
uniform mat4 view;

const float diskHeight = 0.2;
const float diskDensityV = 2.0;
const float diskDensityH = 15.0 / 8.0;
const float diskNoiseScale = 1.0;
const float diskSpeed = 1.0;

const float innerRadius = 2.0;
const float outerRadius = 9.0;

const float minDensity = 0.001;
const float densityScale = 16000.0;

int diskNoiseLOD = 4;

float steps = 0.01;
int iteration = 1024;//minimum: 768

const float G = 1.0;
const float M = 1.0;
const float c = 1.0;

const vec3 e_z = vec3(0.0, 0.0, 1.0);

const int integrationNum = 80;
const vec3 matchingFunctions[81] = vec3[](
vec3(0.0014, 0.0000, 0.0065), vec3(0.0022, 0.0001, 0.0105), vec3(0.0042, 0.0001, 0.0201),
vec3(0.0076, 0.0002, 0.0362), vec3(0.0143, 0.0004, 0.0679), vec3(0.0232, 0.0006, 0.1102),
vec3(0.0435, 0.0012, 0.2074), vec3(0.0776, 0.0022, 0.3713), vec3(0.1344, 0.0040, 0.6456),
vec3(0.2148, 0.0073, 1.0391), vec3(0.2839, 0.0116, 1.3856), vec3(0.3285, 0.0168, 1.6230),
vec3(0.3483, 0.0230, 1.7471), vec3(0.3481, 0.0298, 1.7826), vec3(0.3362, 0.0380, 1.7721),
vec3(0.3187, 0.0480, 1.7441), vec3(0.2908, 0.0600, 1.6692), vec3(0.2511, 0.0739, 1.5281),
vec3(0.1954, 0.0910, 1.2876), vec3(0.1421, 0.1126, 1.0419), vec3(0.0956, 0.1390, 0.8130),
vec3(0.0580, 0.1693, 0.6162), vec3(0.0320, 0.2080, 0.4652), vec3(0.0147, 0.2586, 0.3533),
vec3(0.0049, 0.3230, 0.2720), vec3(0.0024, 0.4073, 0.2123), vec3(0.0093, 0.5030, 0.1582),
vec3(0.0291, 0.6082, 0.1117), vec3(0.0633, 0.7100, 0.0782), vec3(0.1096, 0.7932, 0.0573),
vec3(0.1655, 0.8620, 0.0422), vec3(0.2257, 0.9149, 0.0298), vec3(0.2904, 0.9540, 0.0203),
vec3(0.3597, 0.9803, 0.0134), vec3(0.4334, 0.9950, 0.0087), vec3(0.5121, 1.0000, 0.0057),
vec3(0.5945, 0.9950, 0.0039), vec3(0.6784, 0.9786, 0.0027), vec3(0.7621, 0.9520, 0.0021),
vec3(0.8425, 0.9154, 0.0018), vec3(0.9163, 0.8700, 0.0017), vec3(0.9786, 0.8163, 0.0014),
vec3(1.0263, 0.7570, 0.0011), vec3(1.0567, 0.6949, 0.0010), vec3(1.0622, 0.6310, 0.0008),
vec3(1.0456, 0.5668, 0.0006), vec3(1.0026, 0.5030, 0.0003), vec3(0.9384, 0.4412, 0.0002),
vec3(0.8544, 0.3810, 0.0002), vec3(0.7514, 0.3210, 0.0001), vec3(0.6424, 0.2650, 0.0000),
vec3(0.5419, 0.2170, 0.0000), vec3(0.4479, 0.1750, 0.0000), vec3(0.3608, 0.1382, 0.0000),
vec3(0.2835, 0.1070, 0.0000), vec3(0.2187, 0.0816, 0.0000), vec3(0.1649, 0.0610, 0.0000),
vec3(0.1212, 0.0446, 0.0000), vec3(0.0874, 0.0320, 0.0000), vec3(0.0636, 0.0232, 0.0000),
vec3(0.0468, 0.0170, 0.0000), vec3(0.0329, 0.0119, 0.0000), vec3(0.0227, 0.0082, 0.0000),
vec3(0.0158, 0.0057, 0.0000), vec3(0.0114, 0.0041, 0.0000), vec3(0.0081, 0.0029, 0.0000),
vec3(0.0058, 0.0021, 0.0000), vec3(0.0041, 0.0015, 0.0000), vec3(0.0029, 0.0010, 0.0000),
vec3(0.0020, 0.0007, 0.0000), vec3(0.0014, 0.0005, 0.0000), vec3(0.0010, 0.0004, 0.0000),
vec3(0.0007, 0.0002, 0.0000), vec3(0.0005, 0.0002, 0.0000), vec3(0.0003, 0.0001, 0.0000),
vec3(0.0002, 0.0001, 0.0000), vec3(0.0002, 0.0001, 0.0000), vec3(0.0001, 0.0000, 0.0000),
vec3(0.0001, 0.0000, 0.0000), vec3(0.0001, 0.0000, 0.0000), vec3(0.0000, 0.0000, 0.0000)
);

const mat3 rec2020Transform = mat3(
1.7167, -0.6667, 0.0176,
-0.3557, 1.6165, -0.0428,
-0.2534, 0.0158, 0.9421
);

const float LightSpeed = 2.99792458e8;
const float BoltzmannConstant = 1.3806504e-23;
const float PlanckConstant = 6.62607015e-34;
const float Min_cY = 3931191.541677483;//1000K
const float Max_cY = 9.15738182436502e+16;//20000K
const float LogMin_cY = log(Min_cY);
const float LogMax_cY = log(Max_cY);

const float TEMP_RANGE = 39000.0;//1000K~40000K

const int maxTurns = 2;
const float PI = 3.14159265;

uniform samplerCube cubemap;

//	Simplex 3D Noise
//	by Ian McEwan, Ashima Arts
//  https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
vec4 permute(vec4 x){ return mod(((x*34.0)+1.0)*x, 289.0); }
vec4 taylorInvSqrt(vec4 r){ return 1.79284291400159 - 0.85373472095314 * r; }

float snoise(vec3 v)
{
    const vec2  C = vec2(1.0/6.0, 1.0/3.0);
    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

    // First corner
    vec3 i  = floor(v + dot(v, C.yyy));
    vec3 x0 =   v - i + dot(i, C.xxx);

    // Other corners
    vec3 g = step(x0.yzx, x0.xyz);
    vec3 l = 1.0 - g;
    vec3 i1 = min(g.xyz, l.zxy);
    vec3 i2 = max(g.xyz, l.zxy);

    //  x0 = x0 - 0. + 0.0 * C
    vec3 x1 = x0 - i1 + 1.0 * C.xxx;
    vec3 x2 = x0 - i2 + 2.0 * C.xxx;
    vec3 x3 = x0 - 1. + 3.0 * C.xxx;

    // Permutations
    i = mod(i, 289.0);
    vec4 p = permute(permute(permute(
    i.z + vec4(0.0, i1.z, i2.z, 1.0))
    + i.y + vec4(0.0, i1.y, i2.y, 1.0))
    + i.x + vec4(0.0, i1.x, i2.x, 1.0));

    // Gradients
    // ( N*N points uniformly over a square, mapped onto an octahedron.)
    float n_ = 1.0/7.0;// N=7
    vec3  ns = n_ * D.wyz - D.xzx;

    vec4 j = p - 49.0 * floor(p * ns.z *ns.z);//  mod(p,N*N)

    vec4 x_ = floor(j * ns.z);
    vec4 y_ = floor(j - 7.0 * x_);// mod(j,N)

    vec4 x = x_ *ns.x + ns.yyyy;
    vec4 y = y_ *ns.x + ns.yyyy;
    vec4 h = 1.0 - abs(x) - abs(y);

    vec4 b0 = vec4(x.xy, y.xy);
    vec4 b1 = vec4(x.zw, y.zw);

    vec4 s0 = floor(b0)*2.0 + 1.0;
    vec4 s1 = floor(b1)*2.0 + 1.0;
    vec4 sh = -step(h, vec4(0.0));

    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy;
    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww;

    vec3 p0 = vec3(a0.xy, h.x);
    vec3 p1 = vec3(a0.zw, h.y);
    vec3 p2 = vec3(a1.xy, h.z);
    vec3 p3 = vec3(a1.zw, h.w);

    //Normalise gradients
    vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));
    p0 *= norm.x;
    p1 *= norm.y;
    p2 *= norm.z;
    p3 *= norm.w;

    // Mix final noise value
    vec4 m = max(0.6 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);
    m = m * m;
    return 42.0 * dot(m*m, vec4(dot(p0, x0), dot(p1, x1),
    dot(p2, x2), dot(p3, x3)));
}

vec3 toSpherical(vec3 pos)
{
    float rho = sqrt((pos.x * pos.x) + (pos.y * pos.y) + (pos.z * pos.z));
    float theta = atan(pos.z, pos.x);
    float phi = asin(pos.y /rho);
    return vec3(rho, theta, phi);
}

float calculateRedShift(vec3 pos)
{
    float dist = sqrt(dot(pos, pos));
    float valid = step(1.0, dist);

    float redshift = sqrt(max(0.0, 1.0 - 1.0 / max(dist, 1.0))) - 1.0;
    redshift = 1.0 / (1.0 + redshift);

    redshift *= valid;
    return redshift;
}

float calculateDopplerEffect(vec3 pos, vec3 viewDir)
{
    vec3 vel;
    float r = sqrt(dot(pos, pos));
    float safeR = max(r, 1.0 + 1e-6);

    if (r < 1.0)
    {
        vel = vec3(0.0f);
        return 1.0f;
    }

    float velMag;
    float velMag0 = -sqrt((G * M / (2.0 * (safeR - 1.0))));
    float velMag1 = -sqrt((G * M / r) * (1.0 - 3.0 * G * M / (safeR * c * c)));

    velMag = accretionDiskOrbit == 0 ? velMag0 : velMag1;

    vec3 velDir = normalize(cross(vec3(0.0, 1.0, 0.0), pos));
    vel = velDir * velMag;

    vec3 beta_s = vel / c;

    float gamma = inversesqrt(1.0 - dot(beta_s, beta_s));
    float dopplerShift = gamma * (1.0 + dot(vel, normalize(viewDir)));

    return dopplerShift;
}

float calculateRealisticTemperature(vec3 pos, float baseTemp)
{
    float radius = sqrt(dot(pos, pos));
    return baseTemp * pow(radius, -0.75);
}

vec3 convertToRGB(float cX, float cY, float cZ, float normalized_cY) {
    float denom = cX + cY + cZ;
    float x = denom > 0.0 ? cX / denom : 0.0;
    float y = denom > 0.0 ? cY / denom : 0.0;
    float z = 1.0 - x - y;

    float X = x / y;
    float Y = 1.0;
    float Z = z / y;

    vec3 inputColor = vec3(X, Y, Z);
    vec3 outputColor = rec2020Transform * inputColor;

    float R = outputColor.r;
    float G = outputColor.g;
    float B = outputColor.b;

    R = max(R, 0.0);
    G = max(G, 0.0);
    B = max(B, 0.0);

    float maxVal = max(max(R, G), B);
    if (maxVal > 1.0) {
        float invMaxVal = 1.0 / maxVal;
        R *= invMaxVal;
        G *= invMaxVal;
        B *= invMaxVal;
    }

    return vec3(R, G, B) * normalized_cY;
}

vec3 getBlackbodyColor(float temperature, float redshiftFactor)
{
    float cX = 0.0;
    float cY = 0.0;
    float cZ = 0.0;
    float wavelength = 380.0;
    float adjustedTemperature = temperature / redshiftFactor;

    for (int i = 0; i < integrationNum; i++) {
        wavelength += 5.0;
        float lambda = wavelength * 1e-9;
        float intensity = ((2.0 * PlanckConstant * pow(LightSpeed, 2)) / pow(lambda, 5)) /
        (exp((PlanckConstant * LightSpeed) / (lambda * BoltzmannConstant * adjustedTemperature)) - 1.0);
        vec3 matchingFunc = matchingFunctions[i];
        cX += intensity * matchingFunc.x * 5.0;
        cY += intensity * matchingFunc.y * 5.0;
        cZ += intensity * matchingFunc.z * 5.0;
    }

    float log_cY = log(cY);
    float normalized_cY = (log_cY - LogMin_cY) / (LogMax_cY - LogMin_cY);//normalize intensity

    return convertToRGB(cX, cY, cZ, normalized_cY);
}

vec4 computeEmitterFourVelocity(vec3 pos)//non relativistic keplerian orbit
{
    float r = length(pos);
    float v = 1.0 / sqrt(2 * r);
    float gamma = 1.0 / sqrt(1.0 - v * v);
    float Omega = 1.0 / (r * sqrt(r));

    return vec4(gamma, 0.0, 0.0, gamma * Omega);
}

vec4 computeObserverFourVelocity(vec3 pos)
{
    float r = length(pos);
    float ut = 1.0 / sqrt(1.0 - 1.0 / r);
    return vec4(ut, 0.0, 0.0, 0.0);
}

vec4 computePhotonFourMomentum(vec3 pos, vec3 dir)
{
    //photon must satisfy the null condition in schwarzschild metric
    //   -f (p^t)^2 + p_r^2/f + r² (p_θ² + sin²θ·p_φ²) = 0
    float r = length(pos);
    float theta = acos(clamp(pos.z / r, -1.0, 1.0));
    float phi = atan(pos.y, pos.x);

    vec3 er = normalize(pos);
    vec3 ephi   = normalize(vec3(-sin(phi), 0.0, cos(phi)));
    vec3 etheta = normalize(cross(ephi, er));

    float pr = dot(dir, er);
    float ptheta = dot(dir, etheta);
    float pphi = dot(dir, ephi);

    float f = 1.0 - 1.0 / r;
    float spatial = (pr * pr) / f + r * r * (ptheta * ptheta + sin(theta) * sin(theta) * pphi * pphi);
    float pt = sqrt(spatial / f);

    return vec4(pt, pr, ptheta, pphi);
}

float lorentzDot(vec4 a, vec4 b, vec3 pos)
{
    float r = length(pos);
    float theta = acos(clamp(pos.z / r, -1.0, 1.0));
    float f = 1.0 - 1.0 / r;

    return -f * a.x * b.x
    + (1.0 / f) * a.y * b.y
    + r * r * a.z * b.z
    + r * r * sin(theta) * sin(theta) * a.w * b.w;
}

float computeGRRedshift(vec4 p, vec3 pos)
{
    vec4 u_em = computeEmitterFourVelocity(pos);
    vec4 u_obs = computeObserverFourVelocity(cameraPos);

    float num = -lorentzDot(p, u_em, pos);
    float den = -lorentzDot(p, u_obs, cameraPos);

    return num / den;
}

float calculateDiskTurbulence(vec3 pos, float time)
{
    float r = length(vec2(pos.x, pos.z));
    float turbulence = 0.0;

    vec3 sphericalCoord = toSpherical(pos);

    float omega = sqrt(1 * 1 / (r * r * r));
    float timeOffset = time * omega * diskSpeed;

    float amplitude = 1.0;
    float totalWeight = 0.0;

    for (int i = 0; i < diskNoiseLOD; i++)
    {
        float layerSpeed = ((1 % 2) == 0) ? 1.0 : -0.7;
        float frequency = pow(2.0, float(i));

        float radialfactor = mix(0.5, 2.0, smoothstep(outerRadius, innerRadius * 1.2, r));
        float rotationOffset = timeOffset * layerSpeed;

        float heightEffect = 1.0 - 0.5 * smoothstep(0.0, diskHeight, abs(pos.y));

        vec3 turbCoord = vec3(
        sphericalCoord.x * frequency * radialfactor,
        sphericalCoord.y * rotationOffset * frequency,
        sphericalCoord.z * frequency
        );

        float noiseValue = snoise(turbCoord * diskNoiseScale);

        float weight = amplitude * heightEffect;
        turbulence += noiseValue * weight;
        totalWeight += weight;

        amplitude *= 0.5;
    }

    turbulence = turbulence / totalWeight;
    return turbulence * 0.5 + 0.5;
}

float getTurbulenceIntensity(float radius)
{
    float r_isco = 3.0;

    if (radius < innerRadius)
    {
        return 0.3 * smoothstep(0.0, innerRadius, radius);
    }
    else if (radius < r_isco * 2.0)
    {
        return 1.0;
    }
    else
    {
        return mix(1.0, 0.2, smoothstep(r_isco * 2.0, outerRadius, radius));
    }
}

float getTurbulenceTimeFactor(vec3 pos, float time)
{
    float r = length(vec2(pos.x, pos.z));
    float phi = atan(pos.z, pos.x);

    float slowFactor = sin(time * 0.1 + phi) * 0.5 + 0.5;

    float mediumFactor = sin(time * 0.3 + r * 0.5) * 0.5 + 0.5;

    float innerWeight = smoothstep(outerRadius, innerRadius * 2.0, r);

    return mix(mediumFactor, slowFactor, 1.0 - innerWeight);
}

void diskRender(vec3 pos, inout vec4 color, inout float alpha, vec3 viewDir)
{
    float lengthPos = length(pos / vec3(outerRadius, diskHeight, outerRadius));
    if (lengthPos >= 1.0) return;

    float density = max(0.0, 1.0 - lengthPos);
    if (density < minDensity) return;

    float absY = abs(pos.y);
    density *= exp(-pow(absY, diskDensityV) / (2.0 * diskHeight * diskHeight));
    density *= smoothstep(innerRadius, innerRadius * 1.5, length(pos));
    if (density < minDensity) return;

    float r = length(vec2(pos.x, pos.z));
    float turbulencePattern  = calculateDiskTurbulence(pos, time);
    float turbulenceStrength = getTurbulenceIntensity(r);
    float timeVariation      = getTurbulenceTimeFactor(pos, time);
    float finalTurbulence    = mix(0.7, 1.3, turbulencePattern * turbulenceStrength * timeVariation);

    density *= finalTurbulence;
    if (density < minDensity) return;

    float baseTemp = realisticTemperature ? calculateRealisticTemperature(pos, accretionTemp) : accretionTemp;

    float g_use = 1.0;
    if (gravitationalRedShift || dopplerShift)
    {
        vec4 p = computePhotonFourMomentum(pos, normalize(viewDir));

        if (gravitationalRedShift && dopplerShift)
        {
            g_use = 1.0 / computeGRRedshift(p, pos);
        }
        else if (gravitationalRedShift && !dopplerShift)
        {
            float rr = max(length(pos), 1.000001);
            float ut_em = inversesqrt(max(1e-8, 1.0 - 1.0 / rr));
            vec4 u_em_static = vec4(ut_em, 0.0, 0.0, 0.0);
            vec4 u_obs       = computeObserverFourVelocity(cameraPos);
            float num = -lorentzDot(p, u_obs, cameraPos);
            float den = -lorentzDot(p, u_em_static, pos);
            g_use = num / den;
        }
        else
        {
            g_use = calculateDopplerEffect(pos, viewDir);
        }
    }

    vec3  cl = getBlackbodyColor((realisticTemperature ? calculateRealisticTemperature(pos, accretionTemp)
    : accretionTemp) * g_use, 1.0);
    float intensityMul = beaming ? pow(g_use, 4.0) : 1.0;

    const float sigmaAbs = 2.0;
    float tau   = sigmaAbs * density * steps;
    float trans = exp(-tau);

    vec3 emission = density * cl * intensityMul;

    color.rgb += (1.0 - alpha) * (1.0 - trans) * emission * 100;

    alpha *= trans;
}

float acceleration(float u)
{
    return -u * (1.0 - 1.5 * u);
}

void verlet(inout float u, inout float du, float dt)
{
    float ddu = acceleration(u);
    float u_new = u + du * dt + 0.5 * ddu * dt * dt;
    float ddu_new = acceleration(u_new);

    du += 0.5 * (ddu + ddu_new) * dt;
    u = u_new;
}

void rk4(inout float u, inout float du, float dt)
{
    float k1_u = du;
    float k1_du = acceleration(u);

    float k2_u = du + 0.5 * dt * k1_du;
    float k2_du = acceleration(u + 0.5 * dt * k1_u);

    float k3_u = du + 0.5 * dt * k2_du;
    float k3_du = acceleration(u + 0.5 * dt * k2_u);

    float k4_u = du + dt * k3_du;
    float k4_du = acceleration(u + dt * k3_u);

    u += (dt / 6.0) * (k1_u + 2.0 * k2_u + 2.0 * k3_u + k4_u);
    du += (dt / 6.0) * (k1_du + 2.0 * k2_du + 2.0 * k3_du + k4_du);
}

void shadeDiskSurface(vec3 hit, vec3 viewDir, inout vec4 color, inout float alpha)
{
    vec3 n = vec3(0, 1, 0) * sign(hit.y == 0.0 ? 1.0 : hit.y);

    float T = realisticTemperature ? calculateRealisticTemperature(hit, accretionTemp) : accretionTemp;

    vec4 p = computePhotonFourMomentum(hit, normalize(viewDir));
    float g = 1.0 / computeGRRedshift(p, hit);

    vec3  rgb = getBlackbodyColor(T * g, 1.0);
    float amp = beaming ? pow(g, 4.0) : 1.0;

    float cosO = abs(dot(normalize(viewDir), n));
    float lambert = mix(0.2, 1.0, cosO);

    float sigma = 6.0;
    float tau   = sigma * (diskHeight * 2.0) / max(1e-3, cosO);
    float trans = exp(-tau);

    vec3 emission = rgb * amp * lambert;

    color.rgb += (1.0 - alpha) * (1.0 - trans) * emission;
    alpha      = 1.0 - (1.0 - alpha) * trans;
}

vec4 rayMarch(vec3 pos, vec3 dir)
{
    vec4 color = vec4(0.0);
    float alpha = 1.0;

    float yPrev = pos.y;
    vec3 prev_pos = pos;

    float u = 1.0 / length(pos);
    vec3  n = normalize(pos);
    vec3  t = normalize(cross(cross(n, dir), n));

    float du = -dot(n, dir) / dot(dir, t) * u;
    float phi = 0.0;

    float maxPhi = float(maxTurns) * 2.0 * PI;

    for (int i = 0; i < iteration; ++i)
    {
        float stiff = max(1e-3, abs(1.0 - 1.5 * u));
        float dt = clamp(steps / stiff, steps*0.25, steps*4.0);

        (integrationType == 0) ? verlet(u, du, dt) : rk4(u, du, dt);
        if (u < 0.0) break;

        phi += dt;
        if (phi > maxPhi) break;

        vec3 old = pos;
        pos = (cos(phi) * n + sin(phi) * t) / u;
        dir = pos - old;

        if (disk && length(pos.xz) <= outerRadius && abs(pos.y) <= diskHeight)
        diskRender(pos, color, alpha, dir);

        float rXZ = length(pos.xz);
        bool inRadial = (rXZ >= innerRadius) && (rXZ <= outerRadius);
        if (inRadial && (yPrev * pos.y <= 0.0))
        {
            float t = yPrev / (yPrev - pos.y + 1e-6);
            vec3 hit = mix(prev_pos, pos, clamp(t, 0.0, 1.0));

            shadeDiskSurface(hit, dir, color, alpha);
        }

        yPrev = pos.y;
        prev_pos = pos;
        if (alpha < 1e-3) break;
    }

    color += texture(cubemap, normalize(dir));
    return color;
}

void main()
{
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    if (pixelCoord.x >= resolution.x || pixelCoord.y >= resolution.y)
    return;

    vec2 uv = (2.0 * vec2(pixelCoord) - resolution) / resolution.y;

    vec3 dirCam = normalize(vec3(uv, -1.0));

    mat4 invView = inverse(view);
    vec3 dirWorld = (invView * vec4(dirCam, 0.0)).xyz;
    dirWorld = normalize(dirWorld);

    vec3 posWorld = (invView * vec4(0, 0, 0, 1)).xyz;

    vec4 fragColor = rayMarch(posWorld, dirWorld);

    imageStore(outputImage, pixelCoord, fragColor);
}