#version 430 core

precision highp float;

layout (local_size_x = 16, local_size_y = 16) in;
layout (rgba16f, binding = 0) uniform image2D outputImage;

uniform vec2 resolution;

uniform float time;

uniform int integrationType;
uniform bool disk;
uniform int accretionDiskOrbit;
uniform bool dopplerShift;
uniform bool gravitationalRedShift;
uniform bool beaming;
uniform bool realisticTemperature;
uniform float accretionTemp;

uniform vec3 cameraPos;
uniform mat4 view;

float diskHeight = 0.2;
float diskDensityV = 2.0;
float diskDensityH = 1.5;
float diskNoiseScale = 1.0;
float diskSpeed = 1.0;

int diskNoiseLOD = 6;

float steps = 0.01;
int iteration = 768; //minimum: 768

const float G = 1.0;
const float M = 1.0;
const float c = 1.0;

const vec3 e_z = vec3(0.0, 0.0, 1.0);

const vec3 matchingFunctions[81] = vec3[](
vec3(0.0014, 0.0000, 0.0065), vec3(0.0022, 0.0001, 0.0105), vec3(0.0042, 0.0001, 0.0201),
vec3(0.0076, 0.0002, 0.0362), vec3(0.0143, 0.0004, 0.0679), vec3(0.0232, 0.0006, 0.1102),
vec3(0.0435, 0.0012, 0.2074), vec3(0.0776, 0.0022, 0.3713), vec3(0.1344, 0.0040, 0.6456),
vec3(0.2148, 0.0073, 1.0391), vec3(0.2839, 0.0116, 1.3856), vec3(0.3285, 0.0168, 1.6230),
vec3(0.3483, 0.0230, 1.7471), vec3(0.3481, 0.0298, 1.7826), vec3(0.3362, 0.0380, 1.7721),
vec3(0.3187, 0.0480, 1.7441), vec3(0.2908, 0.0600, 1.6692), vec3(0.2511, 0.0739, 1.5281),
vec3(0.1954, 0.0910, 1.2876), vec3(0.1421, 0.1126, 1.0419), vec3(0.0956, 0.1390, 0.8130),
vec3(0.0580, 0.1693, 0.6162), vec3(0.0320, 0.2080, 0.4652), vec3(0.0147, 0.2586, 0.3533),
vec3(0.0049, 0.3230, 0.2720), vec3(0.0024, 0.4073, 0.2123), vec3(0.0093, 0.5030, 0.1582),
vec3(0.0291, 0.6082, 0.1117), vec3(0.0633, 0.7100, 0.0782), vec3(0.1096, 0.7932, 0.0573),
vec3(0.1655, 0.8620, 0.0422), vec3(0.2257, 0.9149, 0.0298), vec3(0.2904, 0.9540, 0.0203),
vec3(0.3597, 0.9803, 0.0134), vec3(0.4334, 0.9950, 0.0087), vec3(0.5121, 1.0000, 0.0057),
vec3(0.5945, 0.9950, 0.0039), vec3(0.6784, 0.9786, 0.0027), vec3(0.7621, 0.9520, 0.0021),
vec3(0.8425, 0.9154, 0.0018), vec3(0.9163, 0.8700, 0.0017), vec3(0.9786, 0.8163, 0.0014),
vec3(1.0263, 0.7570, 0.0011), vec3(1.0567, 0.6949, 0.0010), vec3(1.0622, 0.6310, 0.0008),
vec3(1.0456, 0.5668, 0.0006), vec3(1.0026, 0.5030, 0.0003), vec3(0.9384, 0.4412, 0.0002),
vec3(0.8544, 0.3810, 0.0002), vec3(0.7514, 0.3210, 0.0001), vec3(0.6424, 0.2650, 0.0000),
vec3(0.5419, 0.2170, 0.0000), vec3(0.4479, 0.1750, 0.0000), vec3(0.3608, 0.1382, 0.0000),
vec3(0.2835, 0.1070, 0.0000), vec3(0.2187, 0.0816, 0.0000), vec3(0.1649, 0.0610, 0.0000),
vec3(0.1212, 0.0446, 0.0000), vec3(0.0874, 0.0320, 0.0000), vec3(0.0636, 0.0232, 0.0000),
vec3(0.0468, 0.0170, 0.0000), vec3(0.0329, 0.0119, 0.0000), vec3(0.0227, 0.0082, 0.0000),
vec3(0.0158, 0.0057, 0.0000), vec3(0.0114, 0.0041, 0.0000), vec3(0.0081, 0.0029, 0.0000),
vec3(0.0058, 0.0021, 0.0000), vec3(0.0041, 0.0015, 0.0000), vec3(0.0029, 0.0010, 0.0000),
vec3(0.0020, 0.0007, 0.0000), vec3(0.0014, 0.0005, 0.0000), vec3(0.0010, 0.0004, 0.0000),
vec3(0.0007, 0.0002, 0.0000), vec3(0.0005, 0.0002, 0.0000), vec3(0.0003, 0.0001, 0.0000),
vec3(0.0002, 0.0001, 0.0000), vec3(0.0002, 0.0001, 0.0000), vec3(0.0001, 0.0000, 0.0000),
vec3(0.0001, 0.0000, 0.0000), vec3(0.0001, 0.0000, 0.0000), vec3(0.0000, 0.0000, 0.0000)
);

const float TEMP_RANGE = 39000.0;//1000K~40000K

uniform sampler2D blackbody;
uniform samplerCube cubemap;

//	Simplex 3D Noise
//	by Ian McEwan, Ashima Arts
//  https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
vec4 permute(vec4 x){ return mod(((x*34.0)+1.0)*x, 289.0); }
vec4 taylorInvSqrt(vec4 r){ return 1.79284291400159 - 0.85373472095314 * r; }

float snoise(vec3 v)
{
    const vec2  C = vec2(1.0/6.0, 1.0/3.0);
    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

    // First corner
    vec3 i  = floor(v + dot(v, C.yyy));
    vec3 x0 =   v - i + dot(i, C.xxx);

    // Other corners
    vec3 g = step(x0.yzx, x0.xyz);
    vec3 l = 1.0 - g;
    vec3 i1 = min(g.xyz, l.zxy);
    vec3 i2 = max(g.xyz, l.zxy);

    //  x0 = x0 - 0. + 0.0 * C
    vec3 x1 = x0 - i1 + 1.0 * C.xxx;
    vec3 x2 = x0 - i2 + 2.0 * C.xxx;
    vec3 x3 = x0 - 1. + 3.0 * C.xxx;

    // Permutations
    i = mod(i, 289.0);
    vec4 p = permute(permute(permute(
    i.z + vec4(0.0, i1.z, i2.z, 1.0))
    + i.y + vec4(0.0, i1.y, i2.y, 1.0))
    + i.x + vec4(0.0, i1.x, i2.x, 1.0));

    // Gradients
    // ( N*N points uniformly over a square, mapped onto an octahedron.)
    float n_ = 1.0/7.0;// N=7
    vec3  ns = n_ * D.wyz - D.xzx;

    vec4 j = p - 49.0 * floor(p * ns.z *ns.z);//  mod(p,N*N)

    vec4 x_ = floor(j * ns.z);
    vec4 y_ = floor(j - 7.0 * x_);// mod(j,N)

    vec4 x = x_ *ns.x + ns.yyyy;
    vec4 y = y_ *ns.x + ns.yyyy;
    vec4 h = 1.0 - abs(x) - abs(y);

    vec4 b0 = vec4(x.xy, y.xy);
    vec4 b1 = vec4(x.zw, y.zw);

    vec4 s0 = floor(b0)*2.0 + 1.0;
    vec4 s1 = floor(b1)*2.0 + 1.0;
    vec4 sh = -step(h, vec4(0.0));

    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy;
    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww;

    vec3 p0 = vec3(a0.xy, h.x);
    vec3 p1 = vec3(a0.zw, h.y);
    vec3 p2 = vec3(a1.xy, h.z);
    vec3 p3 = vec3(a1.zw, h.w);

    //Normalise gradients
    vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));
    p0 *= norm.x;
    p1 *= norm.y;
    p2 *= norm.z;
    p3 *= norm.w;

    // Mix final noise value
    vec4 m = max(0.6 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);
    m = m * m;
    return 42.0 * dot(m*m, vec4(dot(p0, x0), dot(p1, x1),
    dot(p2, x2), dot(p3, x3)));
}

vec3 toSpherical(vec3 pos)
{
    float rho = sqrt((pos.x * pos.x) + (pos.y * pos.y) + (pos.z * pos.z));
    float theta = atan(pos.z, pos.x);
    float phi = asin(pos.y /rho);
    return vec3(rho, theta, phi);
}

vec4 getBlackBodyColor(float temp)
{
    float x_coord = clamp((temp - 1000) / TEMP_RANGE, 0.0, 1.0);
    vec2 texCoord = vec2(x_coord, 0.5);
    vec4 color = texture2D(blackbody, texCoord);
    return color;
}

float calculateRedShift(vec3 pos)
{
    float dist = sqrt(dot(pos, pos));
    if (dist < 1.0f)
    {
        return 0.0f;
    }
    float redshift = sqrt(1.0f - 1.0f/dist) - 1.0f;

    redshift = (1 / (1.0 + redshift));
    return redshift;
}

float calculateDopplerEffect(vec3 pos, vec3 viewDir)
{
    vec3 vel;
    float r = length(pos);
    if (r < 1.0)
    {
        vel = vec3(0.0f);
        return 1.0f;
    }

    float velMag;
    if (accretionDiskOrbit == 0)
    {
        velMag = -sqrt((G * M / (2.0 * (r - 1.0))));//non relativistic speed
    }
    else if (accretionDiskOrbit == 1)
    {
        velMag = -sqrt((G * M / r) * (1.0 - 3.0 * G * M / (r * c * c)));//relativistic speed
    }

    vec3 velDir = normalize(cross(vec3(0.0, 1.0, 0.0), pos));
    vel = velDir * velMag;

    vec3 beta_s = vel / c;

    float gamma = 1.0 / sqrt(1.0 - dot(beta_s, beta_s));
    float dopplerShift = gamma * (1.0 + dot(vel, normalize(viewDir)));

    return dopplerShift;
}

float calculateRealisticTemperature(vec3 pos, float baseTemp)
{
    float radius = length(pos);
    return baseTemp * pow(radius, -0.75);
}

vec3 getBlackbodyColor(float temperature, float redshiftFactor)
{
    const float LightSpeed = 2.99792458e8;
    const float BoltzmannConstant = 1.3806504e-23;
    const float PlanckConstant = 6.62607015e-34;
    const float Min_cY = 3931191.541677483;         //1000K
    const float Max_cY = 9.15738182436502e+16;      //20000K
    const float LogMin_cY = log(Min_cY);
    const float LogMax_cY = log(Max_cY);

    float cX = 0.0;
    float cY = 0.0;
    float cZ = 0.0;
    float wavelength = 380.0;
    float adjustedTemperature = temperature / redshiftFactor;

    for (int i = 0; i < 80; i++) {
        wavelength += 5.0;
        float lambda = wavelength * 1e-9;
        float intensity = ((2.0 * PlanckConstant * pow(LightSpeed, 2.0)) / pow(lambda, 5.0)) /
        (exp((PlanckConstant * LightSpeed) / (lambda * BoltzmannConstant * adjustedTemperature)) - 1.0);
        vec3 matchingFunc = matchingFunctions[i];
        cX += intensity * matchingFunc.x * 5.0;
        cY += intensity * matchingFunc.y * 5.0;
        cZ += intensity * matchingFunc.z * 5.0;
    }

    float x = cX / (cX + cY + cZ);
    float y = cY / (cX + cY + cZ);
    float z = 1.0 - x - y;

    float Y = 1.0;
    float X = x / y * Y;
    float Z = z / y * Y;

    //CIE XYZ color space
    float R = 3.24096994 * X - 1.53738318 * Y - 0.49861076 * Z;
    float G = -0.96924364 * X + 1.8759675 * Y + 0.04155506 * Z;
    float B = 0.05563008 * X - 0.20397696 * Y + 1.05697151 * Z;

    R = max(R, 0.0);
    G = max(G, 0.0);
    B = max(B, 0.0);

    float maxVal = max(max(R, G), B);
    if (maxVal > 1.0) {
        R /= maxVal;
        G /= maxVal;
        B /= maxVal;
    }

    float log_cY = log(cY);
    float normalized_cY = (log_cY - LogMin_cY) / (LogMax_cY - LogMin_cY);   //normalize intensity

    return vec3(R, G, B) * normalized_cY;
}

void diskRender(vec3 pos, inout vec4 color, inout float alpha, vec3 viewDir)
{
    float innerRadius = 2.0;
    float outerRadius = 9.0;

    float density = max(0.0, 1.0 - length(pos / vec3(outerRadius, diskHeight, outerRadius)));

    if (density < 0.001)
    {
        return;
    }

    density *= exp(-abs(pos.y) / diskHeight * diskDensityV);
    density *= smoothstep(innerRadius, innerRadius * 1.5, length(pos));

    if (density < 0.001)
    {
        return;
    }

    vec3 sphericalCoord =  toSpherical(pos);

    sphericalCoord.y *= 2.0;

    density *= 1.0 / pow(sphericalCoord.x, diskDensityH);
    density *= 16000.0;

    float noise = 1.0;
    float radius = sphericalCoord.x;

    for (int i = 0; i < diskNoiseLOD; ++i)
    {
        noise *= 0.5 * snoise(sphericalCoord * pow(i, 2) * diskNoiseScale) + 0.5;

        float adjustedDiskSpeed = diskSpeed / sqrt(radius);

        if (i % 2 == 0)
        {
            sphericalCoord.y -= time * adjustedDiskSpeed;
        }
        else
        {
            sphericalCoord.y += time * adjustedDiskSpeed;
        }
    }

    float redshift = calculateRedShift(pos);
    float doppler = calculateDopplerEffect(pos, viewDir);

    float accretionTempMod = accretionTemp;

    if (realisticTemperature)
    accretionTempMod = calculateRealisticTemperature(pos, accretionTempMod);

    //It's for calculating doppler shift with Schwartzschild metric
    //doesn't work well much.
    //accretionTempMod *= shift;

    vec3 cl = getBlackbodyColor(accretionTempMod, 1.0);
    if (dopplerShift == true)
    {
        cl = getBlackbodyColor(accretionTempMod, doppler * redshift);// Normalized Blackbody color
        cl /= pow(doppler * redshift, 4);//Stefan-Boltzmann Law
    }

    vec4 dustColor = vec4(cl, 0.1) * 0.1;

    color += density * dustColor * alpha * abs(noise);
}

float acceleration(float u)
{
    return -u * (1.0 - 1.5 * u * u);
}

void verlet(inout float u, inout float du, float dt)
{
    float ddu = acceleration(u);
    float u_new = u + du * dt + 0.5 * ddu * dt * dt;
    float ddu_new = acceleration(u_new);

    du += 0.5 * (ddu + ddu_new) * dt;
    u = u_new;
}

void rk4(inout float u, inout float du, float dt)
{
    float k1_u = du;
    float k1_du = acceleration(u);

    float k2_u = du + 0.5 * dt * k1_du;
    float k2_du = acceleration(u + 0.5 * dt * k1_u);

    float k3_u = du + 0.5 * dt * k2_du;
    float k3_du = acceleration(u + 0.5 * dt * k2_u);

    float k4_u = du + dt * k3_du;
    float k4_du = acceleration(u + dt * k3_u);

    u += (dt / 6.0) * (k1_u + 2.0 * k2_u + 2.0 * k3_u + k4_u);
    du += (dt / 6.0) * (k1_du + 2.0 * k2_du + 2.0 * k3_du + k4_du);
}

vec4 rayMarch(vec3 pos, vec3 dir)
{
    vec4 color = vec4(0.0);
    float alpha = 1.0;

    float u = 1.0 / length(pos), old_u;
    float u0 = u;

    vec3 normalVec = normalize(pos);
    vec3 tangentVec = normalize(cross(cross(normalVec, dir), normalVec));

    float du = -dot(normalVec, dir) / dot(dir, tangentVec) * u;
    float du0 = du;

    float phi = 0.0;
    float t = time;
    float dt = 1.0;

    vec3 old_pos;
    //-------------------------------------------------------------------
    //It's for calculating doppler shift with Schwartzschild metric
    //doesn't work well much.
    /*
    vec4 k_s = vec4(1.0 / sqrt(1.0 - u), 0.0, 0.0, 0.0);
    //camera velocity 4 vector(now stationary)

    vec3 sphericalPos = toSpherical(pos); // r, theta, phi
    float sR = sphericalPos.x;
    float sTheta = sphericalPos.y;
    float sPhi = sphericalPos.z;

    vec4 pos4 = vec4(0, sphericalPos);  //Schwartzschild coord camera pos

    // cartesian coord camera vector
    vec3 e_tau = vec3(1.0 / sqrt(1.0 - u), 0.0, 0.0);
    vec3 e_w = sqrt(1.0 - u) * normalize(vec3(sin(sTheta) * cos(sPhi),
                                sin(sTheta) * sin(sPhi), cos(sTheta)));
    vec3 e_h = normalize(vec3(cos(sTheta) * cos(sPhi),
                              cos(sTheta) * sin(sPhi), -sin(sTheta))) / sR;
    vec3 e_d = normalize(vec3(-sin(sPhi), cos(sPhi), 0.0)) /
                        (sR * sin(sTheta));

    vec3 e_x_prime = normalize(pos);
    vec3 e_z_prime = normalize(cross(e_x_prime, dir));
    vec3 e_y_prime = normalize(cross(e_z_prime, e_x_prime));
        
    float e = sqrt(du * du + u * u * (1.0 - u));

    vec4 l = vec4(e / (1.0 - u), -du, 0.0, u * u);

    float g_kl_recv = k_s.x * l.x * (1.0 - u) - k_s.y * l.y / (1.0 - u)
                            - u * dot(e_tau, e_y_prime) * l.w / (u * u);
    */
    //-------------------------------------------------------------------

    for (int i = 0; i < iteration; ++i)
    {
        old_u = u;

        float dt = steps;

        if (integrationType == 0)
        verlet(u, du, dt);
        else
        rk4(u, du, dt);

        if (u < 0.0)
        break;

        phi += steps;

        old_pos = pos;

        pos = (cos(phi) * normalVec + sin(phi) * tangentVec) / u;
        dir = pos - old_pos;

        //It's for calculating doppler shift with Schwartzschild metric
        //doesn't work well much.
        //e_x_prime = normalize(pos);
        //e_z_prime = normalize(cross(e_x_prime, dir));
        //e_y_prime = normalize(cross(e_z_prime, e_x_prime));

        if (disk && length(pos) <= 9.0)
        {
            /*
            vec4 l_prime = vec4(e / (1.0 - u), -du, 0.0, u * u);
            vec4 k_prime = vec4(sqrt(2.0 / (2.0 - 3.0 * u)), 0.0, 0.0,
                                sqrt(u * u * u / (2.0 - 3.0 * u)));
            */
            //It's for calculating doppler shift with Schwartzschild metric
            //doesn't work well much.
            //e = sqrt(du * du + u * u * (1.0 - u));
            //float g_kl_source = e * sqrt(2.0 / (2.0 - 3.0 * u)) -
            //                  u * sqrt(u / (2.0 - 3.0 * u)) * dot(e_z, e_z_prime);

            //float shift = g_kl_recv / g_kl_source;

            diskRender(pos, color, alpha, dir);
        }
    }

    vec4 skyColor = texture(cubemap, normalize(dir));
    color += skyColor;

    return color;
}

void main()
{
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);

    if (pixelCoord.x >= resolution.x || pixelCoord.y >= resolution.y)
    {
        return;
    }

    vec2 uv = (2.0 * vec2(pixelCoord) - resolution) / resolution.y;
    vec3 dir = normalize(vec3(uv, 2.0));
    vec3 pos = cameraPos;

    dir = (view * vec4(dir, 0.0)).xyz;
    vec4 fragColor = rayMarch(pos, dir);

    imageStore(outputImage, pixelCoord, fragColor);
}