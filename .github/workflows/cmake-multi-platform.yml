name: CMake Build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

permissions:
  contents: write

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dependencies on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libglfw3-dev libglm-dev libglew-dev

      - name: Install dependencies on Windows using vcpkg
        if: matrix.os == 'windows-latest'
        run: |
            git clone https://github.com/microsoft/vcpkg.git
            .\vcpkg\bootstrap-vcpkg.bat
            .\vcpkg\vcpkg.exe install glfw3 glm glew
            .\vcpkg\vcpkg.exe integrate install

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1.10

      - name: Set up Visual Studio
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Configure CMake on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      - name: Configure CMake on Windows
        if: matrix.os == 'windows-latest'
        env:
            VCPKG_ROOT: ${{ github.workspace }}/vcpkg
            CMAKE_TOOLCHAIN_FILE: ${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_TOOLCHAIN_FILE=${{ env.CMAKE_TOOLCHAIN_FILE }}

      - name: Build
        run: cmake --build build --config ${{ matrix.build_type }}

      - name: Archive build
        uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-build-${{ matrix.build_type }}
          path: build

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build
          asset_name: ${{ runner.os }}-build-${{ matrix.build_type }}.zip
          asset_content_type: application/zip